# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: build
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.x'
      
      - name: Install dependencies
        run: go mod download
      - name: Build
        run: go build -v -race ./...
      - name: Run vetting
        run: go vet

  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: test
      uses: actions/setup-go@v4
      with:
        go-version: '1.21.x'

    - name: Install dependencies
      run: go mod download

    - name: Test with the Go CLI
      run: go test -v -race ./...

    - name: Run BenchMarks
      run: go test -bench=. -benchmem ./...

    - name: Run tests with coverage
      id: go-test
      run: go test -coverprofile=coverage.out ./...
    
    - name: Display coverage
      run: go tool cover -func=coverage.out
    
    - name: threshold
      run: |
        THRESHOLD=55.0
        COVERAGE=$(go tool cover -func=coverage.out | grep total: | awk '{print substr($3, 1, length($3)-1)}')
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "Code coverage ($COVERAGE%) is below the threshold ($THRESHOLD%)"
          exit 1
        fi
